{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "02-development.md"
    },
    {
      "type": "file",
      "value": "03-installation.md"
    },
    {
      "type": "file",
      "value": "04-configuration.md"
    },
    {
      "type": "file",
      "value": "05-collections.md"
    },
    {
      "type": "file",
      "value": "06-syncing.md"
    },
    {
      "type": "file",
      "value": "07-searching.md"
    },
    {
      "type": "file",
      "value": "08-troubleshooting.md"
    },
    {
      "type": "file",
      "value": "09-copyright.md"
    },
    {
      "type": "file",
      "value": "10-support.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Typesense Search for Silverstripe\n\n**Author**: [Elliot Sawyer](https://sawyer.nz)\n\n**Repository**: https://codeberg.org/0x/silverstripe-typesense\n\n| [![Supercharge Your Search With Typesense](http://img.youtube.com/vi/3ovkP2u4lbY/0.jpg)](http://www.youtube.com/watch?v=3ovkP2u4lbY \"Supercharge Your Search With Typesense\") | ![A demo embedded on the Typesense homepage](img/ts-docs.webp \"A demo embedded on the Typesense homepage\")  |\n| -------- | ------- |\n\nTypesense is lightning-fast, open source search - no PhD required!  It is an open source alternative to Algolia and an easier-to-use alternative to ElasticSearch and Solr. It offers fast, typo-tolerant, in-memory fuzzy search for building delightful search experiences.\n\n* https://typesense.org/\n* https://github.com/typesense/typesense\n\nThis module was created to create a searchable Silverstripe website using Typesense for indexing.  It provides highly performant, nearly-instant, and often sub-millisecond response times. \n\nTypesense supports:\n\n* Faceting\n* Sorting\n* Curated searches\n* Synonyms\n* Scoped, key-protected search\n* Geospatial searches\n* Machine learning and GPU-enhanced searches\n* Automatic schema detection\n* Analytics\n\n## Documentation\n\n* [Development](docs/en/development.md)\n* [Installation](docs/en/installation.md)\n* [Configuration](docs/en/configuration.md)\n* [Managing Collections and Fields](docs/en/collections.md)\n* [Syncing](docs/en/syncing.md)\n* [How to search](docs/en/searching.md)\n* [Troubleshooting](docs/en/troubleshooting.md)\n\n## Copyright statements\n\nThis software includes contributions from Elliot Sawyer, available under the LGPL3 license (with attribution). This attribution statement is required to be shipped with the module, and is displayed within your application. These will appear in certain areas of your application where the module is being used.\n\n## Support\n\nLike my work? Consider shouting me a coffee or a small donation if this module helped you solve a problem. I accept cryptocurrency at the following addresses:\n\n* Bitcoin: 12gSxkqVNr9QMLQMMJdWemBaRRNPghmS3p\n* Bitcoin Cash: 1QETPtssFRM981TGjVg74uUX8kShcA44ni\n* Litecoin: LbyhaTESx3uQvwwd9So4sGSpi4tTJLKBdz\n",
      "html": "<h1 id=\"typesense-search-for-silverstripe\">Typesense Search for Silverstripe <a class=\"heading-anchor-permalink\" href=\"#typesense-search-for-silverstripe\">#</a></h1>\n<p><strong>Author</strong>: <a href=\"https://sawyer.nz\">Elliot Sawyer</a></p>\n<p><strong>Repository</strong>: <a href=\"https://codeberg.org/0x/silverstripe-typesense\">https://codeberg.org/0x/silverstripe-typesense</a></p>\n<table>\n<thead>\n<tr>\n<th><a href=\"http://www.youtube.com/watch?v=3ovkP2u4lbY\" title=\"Supercharge Your Search With Typesense\"><img src=\"http://img.youtube.com/vi/3ovkP2u4lbY/0.jpg\" alt=\"Supercharge Your Search With Typesense\"></a></th>\n<th><img src=\"img/ts-docs.webp\" alt=\"A demo embedded on the Typesense homepage\" title=\"A demo embedded on the Typesense homepage\"></th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<p>Typesense is lightning-fast, open source search - no PhD required!  It is an open source alternative to Algolia and an easier-to-use alternative to ElasticSearch and Solr. It offers fast, typo-tolerant, in-memory fuzzy search for building delightful search experiences.</p>\n<ul>\n<li><a href=\"https://typesense.org/\">https://typesense.org/</a></li>\n<li><a href=\"https://github.com/typesense/typesense\">https://github.com/typesense/typesense</a></li>\n</ul>\n<p>This module was created to create a searchable Silverstripe website using Typesense for indexing.  It provides highly performant, nearly-instant, and often sub-millisecond response times.</p>\n<p>Typesense supports:</p>\n<ul>\n<li>Faceting</li>\n<li>Sorting</li>\n<li>Curated searches</li>\n<li>Synonyms</li>\n<li>Scoped, key-protected search</li>\n<li>Geospatial searches</li>\n<li>Machine learning and GPU-enhanced searches</li>\n<li>Automatic schema detection</li>\n<li>Analytics</li>\n</ul>\n<h2 id=\"documentation\">Documentation <a class=\"heading-anchor-permalink\" href=\"#documentation\">#</a></h2>\n<ul>\n<li><a href=\"docs/en/development.html\">Development</a></li>\n<li><a href=\"docs/en/installation.html\">Installation</a></li>\n<li><a href=\"docs/en/configuration.html\">Configuration</a></li>\n<li><a href=\"docs/en/collections.html\">Managing Collections and Fields</a></li>\n<li><a href=\"docs/en/syncing.html\">Syncing</a></li>\n<li><a href=\"docs/en/searching.html\">How to search</a></li>\n<li><a href=\"docs/en/troubleshooting.html\">Troubleshooting</a></li>\n</ul>\n<h2 id=\"copyright-statements\">Copyright statements <a class=\"heading-anchor-permalink\" href=\"#copyright-statements\">#</a></h2>\n<p>This software includes contributions from Elliot Sawyer, available under the LGPL3 license (with attribution). This attribution statement is required to be shipped with the module, and is displayed within your application. These will appear in certain areas of your application where the module is being used.</p>\n<h2 id=\"support\">Support <a class=\"heading-anchor-permalink\" href=\"#support\">#</a></h2>\n<p>Like my work? Consider shouting me a coffee or a small donation if this module helped you solve a problem. I accept cryptocurrency at the following addresses:</p>\n<ul>\n<li>Bitcoin: 12gSxkqVNr9QMLQMMJdWemBaRRNPghmS3p</li>\n<li>Bitcoin Cash: 1QETPtssFRM981TGjVg74uUX8kShcA44ni</li>\n<li>Litecoin: LbyhaTESx3uQvwwd9So4sGSpi4tTJLKBdz</li>\n</ul>\n",
      "id": 0
    },
    {
      "path": "02-development.md",
      "url": "02-development.html",
      "content": "## Development Environment\n\nThe author uses docker-compose for development but this is not required.\n\n```yml\nversion: \"3\"\n\nservices:\n  webserver:\n    image: php:8.3\n    ...\n  database:\n    image: mysql:8\n    ...\n  typesense:\n    image: typesense/typesense:26.0\n    restart: on-failure\n    ports:\n      - \"28108:8108\"\n    volumes:\n      - ./typesense-data:/data\n    command: '--data-dir /data --api-key=${TYPESENSE_API_KEY} --enable-cors'\n    environment:\n      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}\n  typesense-dashboard:\n    image: ghcr.io/bfritscher/typesense-dashboard:latest\n    ports:\n      - '${HOST_MACHINE_TYPESENSE_DASHBOARD_PORT}:80'\n\n```\n\nThe two local Typesense images are not actually necessary: you can develop against an externally hosted Typesense installation if that suits your needs better.  \n\nThe dashboard application is available publicly at https://bfritscher.github.io/typesense-dashboard. It is an \"offline\" application in that it can be saved offline and run inside a private network without an external internet connection.  It can also be used to connect to any Typesense installation in the world, as long as that installation has CORS enabled and the domain has been whitelisted.\n\n![Typesense Dashboard](../img/typesense-dashboard.png \"Typesense Dashboard\")\n",
      "html": "<h2 id=\"development-environment\">Development Environment <a class=\"heading-anchor-permalink\" href=\"#development-environment\">#</a></h2>\n<p>The author uses docker-compose for development but this is not required.</p>\n<pre><code class=\"language-yml\">version: &quot;3&quot;\n\nservices:\n  webserver:\n    image: php:8.3\n    ...\n  database:\n    image: mysql:8\n    ...\n  typesense:\n    image: typesense/typesense:26.0\n    restart: on-failure\n    ports:\n      - &quot;28108:8108&quot;\n    volumes:\n      - ./typesense-data:/data\n    command: '--data-dir /data --api-key=${TYPESENSE_API_KEY} --enable-cors'\n    environment:\n      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}\n  typesense-dashboard:\n    image: ghcr.io/bfritscher/typesense-dashboard:latest\n    ports:\n      - '${HOST_MACHINE_TYPESENSE_DASHBOARD_PORT}:80'\n\n</code></pre>\n<p>The two local Typesense images are not actually necessary: you can develop against an externally hosted Typesense installation if that suits your needs better.</p>\n<p>The dashboard application is available publicly at <a href=\"https://bfritscher.github.io/typesense-dashboard\">https://bfritscher.github.io/typesense-dashboard</a>. It is an “offline” application in that it can be saved offline and run inside a private network without an external internet connection.  It can also be used to connect to any Typesense installation in the world, as long as that installation has CORS enabled and the domain has been whitelisted.</p>\n<p><img src=\"../img/typesense-dashboard.png\" alt=\"Typesense Dashboard\" title=\"Typesense Dashboard\"></p>\n",
      "id": 1
    },
    {
      "path": "03-installation.md",
      "url": "03-installation.html",
      "content": "## Installation\n\nAdd this to your composer.json:\n\n```json\n    \"repositories\": {\n        \"elliot-sawyer/silverstripe-typesense\": {\n            \"type\": \"vcs\",\n            \"url\": \"git@codeberg.org:0x/silverstripe-typesense.git\"\n        }\n    },\n```\n\nThen run `composer require elliot-sawyer/silverstripe-typesense`.\n\nThe repositories step is not necessary once the module is public.\n\n",
      "html": "<h2 id=\"installation\">Installation <a class=\"heading-anchor-permalink\" href=\"#installation\">#</a></h2>\n<p>Add this to your composer.json:</p>\n<pre><code class=\"language-json\">    &quot;repositories&quot;: {\n        &quot;elliot-sawyer/silverstripe-typesense&quot;: {\n            &quot;type&quot;: &quot;vcs&quot;,\n            &quot;url&quot;: &quot;git@codeberg.org:0x/silverstripe-typesense.git&quot;\n        }\n    },\n</code></pre>\n<p>Then run <code>composer require elliot-sawyer/silverstripe-typesense</code>.</p>\n<p>The repositories step is not necessary once the module is public.</p>\n",
      "id": 2
    },
    {
      "path": "04-configuration.md",
      "url": "04-configuration.html",
      "content": "## Configuration\n\nYou need a few environment variables defined:\n```\nTYPESENSE_API_KEY=\"......\"\nTYPESENSE_SERVER=\"......\"\nTYPESENSE_SEARCH_KEY=\"......\"\n```\n\n* TYPESENSE_API_KEY can be any random text, but must be kept secret. Anybody with this key has full administrator control over your Typesense installation.  It can be generated with `head /dev/urandom | shasum -a 256`\n* TYPESENSE_SERVER is an _externally facing_ hostname: it may work internally, but users will be sending requests directly to it so it must be accessible in a browser.  For example `http://localhost:8108` may work for you, but if your environment is not publicly listening on 8108 the request may fail.\n* TYPESENSE_SEARCH_KEY is used for front-end searches (so read-only) and exposed publicly to users. More information about this can be found in the [searching section](07-searching.md)\n\nYou can, of course, use an externally hosted Typesense server using a service such as [Typesense Cloud](https://cloud.typesense.org).\n\n",
      "html": "<h2 id=\"configuration\">Configuration <a class=\"heading-anchor-permalink\" href=\"#configuration\">#</a></h2>\n<p>You need a few environment variables defined:</p>\n<pre><code>TYPESENSE_API_KEY=&quot;......&quot;\nTYPESENSE_SERVER=&quot;......&quot;\nTYPESENSE_SEARCH_KEY=&quot;......&quot;\n</code></pre>\n<ul>\n<li>TYPESENSE_API_KEY can be any random text, but must be kept secret. Anybody with this key has full administrator control over your Typesense installation.  It can be generated with <code>head /dev/urandom | shasum -a 256</code></li>\n<li>TYPESENSE_SERVER is an <em>externally facing</em> hostname: it may work internally, but users will be sending requests directly to it so it must be accessible in a browser.  For example <code>http://localhost:8108</code> may work for you, but if your environment is not publicly listening on 8108 the request may fail.</li>\n<li>TYPESENSE_SEARCH_KEY is used for front-end searches (so read-only) and exposed publicly to users. More information about this can be found in the <a href=\"07-searching.html\">searching section</a></li>\n</ul>\n<p>You can, of course, use an externally hosted Typesense server using a service such as <a href=\"https://cloud.typesense.org\">Typesense Cloud</a>.</p>\n",
      "id": 3
    },
    {
      "path": "05-collections.md",
      "url": "05-collections.html",
      "content": "## Creating a collection\n\nCollections are defined and initially created with YML:\n\n```yml\nElliotSawyer\\SilverstripeTypesense\\Typesense:\n  collections:\n    Page:\n      name: Pages\n      fields:\n        - { name: Title, type: string, sort: true }\n        - { name: Content, type: string, optional: true }\n        - { name: Link, type: string, index: false, optional: true}\n      default_sorting_field: # 'exampleField'\n      token_separators: # '-'\n      symbols_to_index: # '+'\n      import_limit: 10000\n      connection_timeout: 2 \n      excludedClasses:\n        - SilverStripe\\ErrorPage\\ErrorPage\n```\n\nWhat's happening here:\n\n* As you are defining the collection on the Page type, only these type of records are inserted into the collection. Subclasses of this page are also included\n* By default, all subclasses of Page are included. To exclude any classes, define an array of them on excludedClasses\n* The `fields` array of arrays defines your Typesense schema. [A list of field types is here](https://typesense.org../26.0/api/collections.html#field-types).  DBDate, DBTime, and DBDateTime fields are converted to integers.\n* If a `default_sorting_field` key is defined, it must be an int or float type. It does not yet support sorting by strings and must be explicitly named - \"auto\" fields based on a regex are not accepted.\n\nOn dev/build, a collection schema will be generated so that it can be managed in the Typesense Admin in the CMS. The indexer will collate all records according to this schema and send it to Typesense.\n\nBy default, all collections use the Collection class when the `TypesenseSyncTask` is run using a very generic `import` method to send data to its collection. \n\nRun `dev/tasks/TypesenseSyncTask`.  All Page records will be inserted with the `import()` method with any excluded classes removed. To inspect your collection, documents, and test search, you can log into your local Typesense installation with https://bfritscher.github.io/typesense-dashboard using your admin API key (assuming CORS is enabled)\n\nWhen the task `TypesenseSyncTask` is run, all collections defined in this YML will be built and synced with Typesense once all required fields and at least one Typesense Field is defined.  Once this is done, the next time you run the task collection building is skipped, and records will be bulk imported.\n\n### Configuring your collection\n\n![A new unsaved collection](img/cms-collections-new.png \"A new unsaved collection\")\n\nThe only fields that are required here are `name` and the `fields` array. `excludedClasses` is used when you want to exclude a particular subclass from being indexed (for example, error pages, redirectors, and other pages that may not have any searchable content).\n\nThese fields are also optional.  They affect how the collection indexes content and the order of the results.  More information of these fields can be found [here](https://typesense.org/docs/26.0/api/collections.html#schema-parameters).\n\n#### default_sorting_field: \n\nThis must be a `int32` or `float` field that exists inside your collection. To work properly it should denote some kind of popularity or score.\n\n#### token_separators\n\nList of symbols or special characters to be used for splitting the text into individual words in addition to space and new-line characters.\n\nFor example you can add - (hyphen) to this list to make a word like non-stick to be split on hyphen and indexed as two separate words.\n\n#### symbols_to_index\n\nList of symbols or special characters to be indexed.\n\nFor example you can add + to this list to make the word c++ indexable verbatim.\n\n#### import_limit and connection_timeout\n\nThese used internally by the Silverstripe Typesense module to limit how many records can be imported into Typesense at once. You would only need to change these when considering performance or resourcing issues.  For example, you may have a large amount of RAM and processing power available, you might consider increasing the **import_limit** value to handle larger bulk uploads. However, local resources are not everything: the Typesense server may not be able handle a large number of documents responsively (for example if it is underload).  In this case, you might consider increasing the **connection_timeout** value\n\n### Configuring your fields\n\n![Adding a new field to your collection](img/cms-collection-fields-new.png \"Adding a new field to your collection\")\n\n\nFields should correspond with individual fields on your DataObject, but a field can actually represent anything - such as a getter method or an array of results from a relationship - depending on the data type of the field.  You'll need to define a `getTypesenseDocument()` method on your object to provide that information\n\n#### Field attributes \n\nEach field can have the following attributes.  Only `name` and `type` are required fields\n\n* **name**: Name of the field.\n* **type**: The data type of the field (see the section below for a list of types).\n* **facet**: Enables faceting on the field. Default: false.\n* **optional**: When set to true, the field can have empty, null or missing values. Default: false.\n* **index**: When set to false, the field will not be indexed in any in-memory index (e.g. search/sort/filter/facet). Default: true.\n* **store**: When set to false, the field value will not be stored on disk. Default: true.\n* **sort**: When set to true, the field will be sortable. Default: true for numbers, false otherwise.\n* **infix**: When set to true, the field value can be infix-searched. Incurs significant memory overhead. Default: false.\n\n#### Field types\n\n* **string**: String values\n* **string[]**: Array of strings\n* **int32**: Integer values up to 2,147,483,647\n* **int32[]**: Array of int32\n* **int64**: Integer values larger than 2,147,483,647\n* **int64[]**: Array of int64\n* **float**: Floating point / decimal numbers\n* **float[]**: Array of floating point / decimal numbers\n* **bool**: true or false\n* **bool[]**: Array of booleans\n* **geopoint**: Latitude and longitude specified as [lat, lng].\n* **geopoint[]**: Arrays of Latitude and longitude specified as [[lat1, lng1], [lat2, lng2]].\n* **object**: Nested objects.\n* **object[]**: Arrays of nested objects.\n* **string***: Special type that automatically converts values to a string or string[].\n* **image**: Special type that is used to indicate a base64 encoded string of an image used for Image search.\n* **auto**: Special type that automatically attempts to infer the data type based on the documents added to the collection.\n#\n\n### Managing your collections\n\n![All of your configured collections](img/cms-collections-admin.png \"All of your configured collections\")\n\n![Your collection's fields](img/cms-collection-fields.png \"Your collection's fields\")\n\nCollections can also be created, managed, and deleted in the CMS. What's in the database is considered the \"source of truth\" that will be synced with Typesense.  Nothing stored on the Typesense server will overwrite the collection you have configured in the CMS.\n\nOnce the collection is created in the CMS and at least one field is added, you'll have two CMS actions available.  These are potentially destructive actions because they change the data present on the remote Typesense server.\n\n#### Update collection in Typesense\n\nThis is used to update the collection when the schema has changed. This is achieved by replacing it entirely if it already exists. When this occurs, the collection will need to be reindexed with `TypesenseSyncTask`.  \n\nBulk imports are not possible until the collection has been uploaded to Typesense.\n\n#### Delete from Typesense\n\nThis is used to delete the collection from Typesense.  When the local collection is deleted, this action is invoked to automatically remove it from Typesense.\n\n",
      "html": "<h2 id=\"creating-a-collection\">Creating a collection <a class=\"heading-anchor-permalink\" href=\"#creating-a-collection\">#</a></h2>\n<p>Collections are defined and initially created with YML:</p>\n<pre><code class=\"language-yml\">ElliotSawyer\\SilverstripeTypesense\\Typesense:\n  collections:\n    Page:\n      name: Pages\n      fields:\n        - { name: Title, type: string, sort: true }\n        - { name: Content, type: string, optional: true }\n        - { name: Link, type: string, index: false, optional: true}\n      default_sorting_field: # 'exampleField'\n      token_separators: # '-'\n      symbols_to_index: # '+'\n      import_limit: 10000\n      connection_timeout: 2 \n      excludedClasses:\n        - SilverStripe\\ErrorPage\\ErrorPage\n</code></pre>\n<p>What’s happening here:</p>\n<ul>\n<li>As you are defining the collection on the Page type, only these type of records are inserted into the collection. Subclasses of this page are also included</li>\n<li>By default, all subclasses of Page are included. To exclude any classes, define an array of them on excludedClasses</li>\n<li>The <code>fields</code> array of arrays defines your Typesense schema. <a href=\"https://typesense.org../26.0/api/collections.html#field-types\">A list of field types is here</a>.  DBDate, DBTime, and DBDateTime fields are converted to integers.</li>\n<li>If a <code>default_sorting_field</code> key is defined, it must be an int or float type. It does not yet support sorting by strings and must be explicitly named - “auto” fields based on a regex are not accepted.</li>\n</ul>\n<p>On dev/build, a collection schema will be generated so that it can be managed in the Typesense Admin in the CMS. The indexer will collate all records according to this schema and send it to Typesense.</p>\n<p>By default, all collections use the Collection class when the <code>TypesenseSyncTask</code> is run using a very generic <code>import</code> method to send data to its collection.</p>\n<p>Run <code>dev/tasks/TypesenseSyncTask</code>.  All Page records will be inserted with the <code>import()</code> method with any excluded classes removed. To inspect your collection, documents, and test search, you can log into your local Typesense installation with <a href=\"https://bfritscher.github.io/typesense-dashboard\">https://bfritscher.github.io/typesense-dashboard</a> using your admin API key (assuming CORS is enabled)</p>\n<p>When the task <code>TypesenseSyncTask</code> is run, all collections defined in this YML will be built and synced with Typesense once all required fields and at least one Typesense Field is defined.  Once this is done, the next time you run the task collection building is skipped, and records will be bulk imported.</p>\n<h3 id=\"configuring-your-collection\">Configuring your collection <a class=\"heading-anchor-permalink\" href=\"#configuring-your-collection\">#</a></h3>\n<p><img src=\"img/cms-collections-new.png\" alt=\"A new unsaved collection\" title=\"A new unsaved collection\"></p>\n<p>The only fields that are required here are <code>name</code> and the <code>fields</code> array. <code>excludedClasses</code> is used when you want to exclude a particular subclass from being indexed (for example, error pages, redirectors, and other pages that may not have any searchable content).</p>\n<p>These fields are also optional.  They affect how the collection indexes content and the order of the results.  More information of these fields can be found <a href=\"https://typesense.org/docs/26.0/api/collections.html#schema-parameters\">here</a>.</p>\n<h4 id=\"default_sorting_field%3A\">default_sorting_field: <a class=\"heading-anchor-permalink\" href=\"#default_sorting_field%3A\">#</a></h4>\n<p>This must be a <code>int32</code> or <code>float</code> field that exists inside your collection. To work properly it should denote some kind of popularity or score.</p>\n<h4 id=\"token_separators\">token_separators <a class=\"heading-anchor-permalink\" href=\"#token_separators\">#</a></h4>\n<p>List of symbols or special characters to be used for splitting the text into individual words in addition to space and new-line characters.</p>\n<p>For example you can add - (hyphen) to this list to make a word like non-stick to be split on hyphen and indexed as two separate words.</p>\n<h4 id=\"symbols_to_index\">symbols_to_index <a class=\"heading-anchor-permalink\" href=\"#symbols_to_index\">#</a></h4>\n<p>List of symbols or special characters to be indexed.</p>\n<p>For example you can add + to this list to make the word c++ indexable verbatim.</p>\n<h4 id=\"import_limit-and-connection_timeout\">import_limit and connection_timeout <a class=\"heading-anchor-permalink\" href=\"#import_limit-and-connection_timeout\">#</a></h4>\n<p>These used internally by the Silverstripe Typesense module to limit how many records can be imported into Typesense at once. You would only need to change these when considering performance or resourcing issues.  For example, you may have a large amount of RAM and processing power available, you might consider increasing the <strong>import_limit</strong> value to handle larger bulk uploads. However, local resources are not everything: the Typesense server may not be able handle a large number of documents responsively (for example if it is underload).  In this case, you might consider increasing the <strong>connection_timeout</strong> value</p>\n<h3 id=\"configuring-your-fields\">Configuring your fields <a class=\"heading-anchor-permalink\" href=\"#configuring-your-fields\">#</a></h3>\n<p><img src=\"img/cms-collection-fields-new.png\" alt=\"Adding a new field to your collection\" title=\"Adding a new field to your collection\"></p>\n<p>Fields should correspond with individual fields on your DataObject, but a field can actually represent anything - such as a getter method or an array of results from a relationship - depending on the data type of the field.  You’ll need to define a <code>getTypesenseDocument()</code> method on your object to provide that information</p>\n<h4 id=\"field-attributes\">Field attributes <a class=\"heading-anchor-permalink\" href=\"#field-attributes\">#</a></h4>\n<p>Each field can have the following attributes.  Only <code>name</code> and <code>type</code> are required fields</p>\n<ul>\n<li><strong>name</strong>: Name of the field.</li>\n<li><strong>type</strong>: The data type of the field (see the section below for a list of types).</li>\n<li><strong>facet</strong>: Enables faceting on the field. Default: false.</li>\n<li><strong>optional</strong>: When set to true, the field can have empty, null or missing values. Default: false.</li>\n<li><strong>index</strong>: When set to false, the field will not be indexed in any in-memory index (e.g. search/sort/filter/facet). Default: true.</li>\n<li><strong>store</strong>: When set to false, the field value will not be stored on disk. Default: true.</li>\n<li><strong>sort</strong>: When set to true, the field will be sortable. Default: true for numbers, false otherwise.</li>\n<li><strong>infix</strong>: When set to true, the field value can be infix-searched. Incurs significant memory overhead. Default: false.</li>\n</ul>\n<h4 id=\"field-types\">Field types <a class=\"heading-anchor-permalink\" href=\"#field-types\">#</a></h4>\n<ul>\n<li><strong>string</strong>: String values</li>\n<li><strong>string[]</strong>: Array of strings</li>\n<li><strong>int32</strong>: Integer values up to 2,147,483,647</li>\n<li><strong>int32[]</strong>: Array of int32</li>\n<li><strong>int64</strong>: Integer values larger than 2,147,483,647</li>\n<li><strong>int64[]</strong>: Array of int64</li>\n<li><strong>float</strong>: Floating point / decimal numbers</li>\n<li><strong>float[]</strong>: Array of floating point / decimal numbers</li>\n<li><strong>bool</strong>: true or false</li>\n<li><strong>bool[]</strong>: Array of booleans</li>\n<li><strong>geopoint</strong>: Latitude and longitude specified as [lat, lng].</li>\n<li><strong>geopoint[]</strong>: Arrays of Latitude and longitude specified as [[lat1, lng1], [lat2, lng2]].</li>\n<li><strong>object</strong>: Nested objects.</li>\n<li><strong>object[]</strong>: Arrays of nested objects.</li>\n<li><strong>string</strong>*: Special type that automatically converts values to a string or string[].</li>\n<li><strong>image</strong>: Special type that is used to indicate a base64 encoded string of an image used for Image search.</li>\n<li><strong>auto</strong>: Special type that automatically attempts to infer the data type based on the documents added to the collection.</li>\n</ul>\n<h1 id=\"\"> <a class=\"heading-anchor-permalink\" href=\"#\">#</a></h1>\n<h3 id=\"managing-your-collections\">Managing your collections <a class=\"heading-anchor-permalink\" href=\"#managing-your-collections\">#</a></h3>\n<p><img src=\"img/cms-collections-admin.png\" alt=\"All of your configured collections\" title=\"All of your configured collections\"></p>\n<p><img src=\"img/cms-collection-fields.png\" alt=\"Your collection's fields\" title=\"Your collection's fields\"></p>\n<p>Collections can also be created, managed, and deleted in the CMS. What’s in the database is considered the “source of truth” that will be synced with Typesense.  Nothing stored on the Typesense server will overwrite the collection you have configured in the CMS.</p>\n<p>Once the collection is created in the CMS and at least one field is added, you’ll have two CMS actions available.  These are potentially destructive actions because they change the data present on the remote Typesense server.</p>\n<h4 id=\"update-collection-in-typesense\">Update collection in Typesense <a class=\"heading-anchor-permalink\" href=\"#update-collection-in-typesense\">#</a></h4>\n<p>This is used to update the collection when the schema has changed. This is achieved by replacing it entirely if it already exists. When this occurs, the collection will need to be reindexed with <code>TypesenseSyncTask</code>.</p>\n<p>Bulk imports are not possible until the collection has been uploaded to Typesense.</p>\n<h4 id=\"delete-from-typesense\">Delete from Typesense <a class=\"heading-anchor-permalink\" href=\"#delete-from-typesense\">#</a></h4>\n<p>This is used to delete the collection from Typesense.  When the local collection is deleted, this action is invoked to automatically remove it from Typesense.</p>\n",
      "id": 4
    },
    {
      "path": "06-syncing.md",
      "url": "06-syncing.html",
      "content": "## Syncing and managing documents in Typesense\n\nAll \"documents\" in Typesense are simply JSON objects you have sent to it; for example, Pages in a Silverstripe installation or a collection of DataObjects.  This module provides ways to provide this data to Typesense.\n\n`ElliotSawyer\\SilverstripeTypesense\\Collection::getTypesenseDocument` is a generic method to convert a Silverstripe record into a Typesense document according to its schema.  It is intended as a one-size-fits-all solution, but sometimes you need to customize data the data that's provided in a field (for example, if you're using something like Tika to extract text from a document).  If you need to do this, you'll need to define a method on your record class:\n\n```php\n    public function getTypesenseDocument()\n    {\n        return [\n            'id' => (string) $this->ID,\n            'Field1' => $this->Field1,\n            'Field2' => SomeOtherModule::inst()->doSomeStuff(),\n            'Field3' => $this->SomeGetterMethod(),\n            'Field4' => $this->SomeRelationship()->map()->toArray(),\n            'Tags' => $this->Tags()->map('Name')->toArray(),\n            'ClassName' => $this->ClassName,\n            'Created' => strtotime($this->Created),\n            'LastEdited' => strtotime($this->LastEdited),\n        ]\n    }\n```\n\nThe ID can be any unique value, but it _must_ be cast into a string or Typesense will reject it. `ClassName`, `Created`, `LastEdited` are included for use within Silverstripe (such as within ModelAdmin and Gridfields) and _may_ be optional (untested).  However, if you do insert timestamps because you want to search for or sort with them, they must be converted into integer values for Typesense to accept them.\n\n### Bulk import\n\nThe module includes a BuildTask called `TypesenseSyncTask`.  Once the collection has been uploaded to Typesense, the TypesenseSyncTask will scan the collection's RecordClass records and bulk-import all of the documents it has been configured to upload. New records are inserted into Typesense according to their `id` field, and existing ones are updated with the current database content.\n\n### One-off saves or deletions\n\nThe module is configured to automatically update the collection when an object is saved or deleted (or in the case of versioned objects, publish and unpublished).\n\nThis can potentially make imports and programmatically generated data slower.  If this is an issue, you can delete the collection before importing or running your build script, then re-install it afterwards and do a bulk-import.\n\n",
      "html": "<h2 id=\"syncing-and-managing-documents-in-typesense\">Syncing and managing documents in Typesense <a class=\"heading-anchor-permalink\" href=\"#syncing-and-managing-documents-in-typesense\">#</a></h2>\n<p>All “documents” in Typesense are simply JSON objects you have sent to it; for example, Pages in a Silverstripe installation or a collection of DataObjects.  This module provides ways to provide this data to Typesense.</p>\n<p><code>ElliotSawyer\\SilverstripeTypesense\\Collection::getTypesenseDocument</code> is a generic method to convert a Silverstripe record into a Typesense document according to its schema.  It is intended as a one-size-fits-all solution, but sometimes you need to customize data the data that’s provided in a field (for example, if you’re using something like Tika to extract text from a document).  If you need to do this, you’ll need to define a method on your record class:</p>\n<pre><code class=\"language-php\">    public function getTypesenseDocument()\n    {\n        return [\n            'id' =&gt; (string) $this-&gt;ID,\n            'Field1' =&gt; $this-&gt;Field1,\n            'Field2' =&gt; SomeOtherModule::inst()-&gt;doSomeStuff(),\n            'Field3' =&gt; $this-&gt;SomeGetterMethod(),\n            'Field4' =&gt; $this-&gt;SomeRelationship()-&gt;map()-&gt;toArray(),\n            'Tags' =&gt; $this-&gt;Tags()-&gt;map('Name')-&gt;toArray(),\n            'ClassName' =&gt; $this-&gt;ClassName,\n            'Created' =&gt; strtotime($this-&gt;Created),\n            'LastEdited' =&gt; strtotime($this-&gt;LastEdited),\n        ]\n    }\n</code></pre>\n<p>The ID can be any unique value, but it <em>must</em> be cast into a string or Typesense will reject it. <code>ClassName</code>, <code>Created</code>, <code>LastEdited</code> are included for use within Silverstripe (such as within ModelAdmin and Gridfields) and <em>may</em> be optional (untested).  However, if you do insert timestamps because you want to search for or sort with them, they must be converted into integer values for Typesense to accept them.</p>\n<h3 id=\"bulk-import\">Bulk import <a class=\"heading-anchor-permalink\" href=\"#bulk-import\">#</a></h3>\n<p>The module includes a BuildTask called <code>TypesenseSyncTask</code>.  Once the collection has been uploaded to Typesense, the TypesenseSyncTask will scan the collection’s RecordClass records and bulk-import all of the documents it has been configured to upload. New records are inserted into Typesense according to their <code>id</code> field, and existing ones are updated with the current database content.</p>\n<h3 id=\"one-off-saves-or-deletions\">One-off saves or deletions <a class=\"heading-anchor-permalink\" href=\"#one-off-saves-or-deletions\">#</a></h3>\n<p>The module is configured to automatically update the collection when an object is saved or deleted (or in the case of versioned objects, publish and unpublished).</p>\n<p>This can potentially make imports and programmatically generated data slower.  If this is an issue, you can delete the collection before importing or running your build script, then re-install it afterwards and do a bulk-import.</p>\n",
      "id": 5
    },
    {
      "path": "07-searching.md",
      "url": "07-searching.html",
      "content": "## Searching\n\nTo enable a basic traditional search (type a full query and execute once), create a controller and a route to it to respond to your search query (or use a page type with an action on it). For example:\n\nNote that when you're searching in this way, you're making use of the project's global `Typesense::client()` and performs searches using the super-admin key.  While this is fine for backend use, you would not want to expose it to a front-end application.  You would want to use a search-only key for this: see \"Instantsearch\" section below.\n\n```yml\nSilverStripe\\Control\\Director:\n  rules:\n    'search': 'YourName\\YourProject\\SearchController'\n```\n\n```php\nclass SearchController extends Controller\n{\n\n    public function index($request)\n    {\n        $client = Typesense::client();\n\n        $collectionName = 'Pages';\n\n        if($collectionName) {\n            $term = $request->getVar('term') ?? '*';\n            $searchParameters = [\n                'q' => $term,\n                'query_by' => 'Title, Content',\n            ];\n\n            $search = $client->collections[$collectionName]->documents->search($searchParameters);\n\n            var_dump($search);\n        }\n\n    }\n}\n```\n\n### Creating a search only key\n\nIn practice, you never want to expose your admin-only key in front-end forms.  For public front-end searches you'll need to obtain a search-only key from the Typesense server.  While there are a number of ways to do this (including via the PHP SDK), the easiest is to use the Typesense dashboard: \n\n* http://localhost:18108/#/apikeys\n* https://bfritscher.github.io/typesense-dashboard/#/apikeys\n\n\n| ![Create a search-only key](../img/search-only-key.png \"Create a search-only key\") | ![Create API Key](../img/create-api-key.png \"Create API Key\")  |\n| -------- | ------- |\n\nSelect \"Search Key Example\" and change the description and \"collections\" array to `Pages` (or the name(s) of the collection(s) this key will be searching) and select \"Create API Key\" in the bottom right.  You'll be shown the API key _one time_ before it's never shown again - record this value and save it in the TYPESENSE_SEARCH_KEY environment variable.\n\nYou'll need to expose this key in a method somewhere, such as Page::getTypesenseSearchKey():\n\n```php\n    public function getTypesenseSearchKey() {\n        return Environment::getEnv('TYPESENSE_SEARCH_KEY');\n    }\n```\n\n### Instantsearch\n\nYou can set up Typesense to use Algolia's Instantsearch library, using an adapter provided by Typesense. \n\n* https://github.com/typesense/typesense-instantsearch-adapter\n* https://github.com/algolia/instantsearch/tree/v4.44.0\n\nPlease note this is a development-only example and may be outdated. In a production environment you would not want to load external Javascript in this way, and ensure you're working with a recent supported version.\n\nExpose the search-only key in the HTML below:\n\n```html\n<script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/npm/instantsearch.js@4.44.0\"></script>\n<script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/npm/typesense-instantsearch-adapter@2/dist/typesense-instantsearch-adapter.min.js\"></script>\n<header>\n<div id=\"global-search-input\"></div>\n</header>\n\n<div id=\"global-search-container\" class=\"container d-none\" data-typesense-search-key=\"$TypesenseSearchKey\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h3>Results</h3>\n        </div>\n        <div class=\"col-3\">\n            <div id=\"global-refinementList-Tags\"></div>\n        </div>\n        <div class=\"col-9\">\n            <div id=\"global-stats\"></div>\n            <div id=\"global-hits\"></div>\n        </div>\n    </div>\n</div>\n```\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n    let typesenseApiKey = document\n        .getElementById('global-search-container')\n        .getAttribute('data-typesense-search-key');\n\n    const typesenseInstantsearchAdapter = new TypesenseInstantSearchAdapter({\n        server: {\n            apiKey: typesenseApiKey, // Be sure to use an API key that only allows searches, in production\n            nodes: [\n                {\n                    host: 'your-external-ip-or-dns-name',\n                    port: '8108',\n                    protocol: 'http',\n                },\n            ],\n        },\n        additionalSearchParameters: {\n            queryBy: 'Title,Content,Tags'\n        },\n    });\n    const searchClient = typesenseInstantsearchAdapter.searchClient;\n\n    const search = instantsearch({\n        searchClient,\n        indexName: 'Pages',\n    });\n\n    search.addWidgets([\n        instantsearch.widgets.searchBox({\n            container: '#global-search-input',\n            showSubmit: false,\n            showReset: false,\n            placeholder: 'type in a search term... ',\n            autofocus: true,\n            cssClasses: {\n                input: 'form-control me-2 w-100',\n                loadingIcon: 'stroke-primary',\n            },\n        }),\n        instantsearch.widgets.infiniteHits({\n            container: '#global-hits',\n            cssClasses: {\n                list: 'list-unstyled',\n                item: 'd-flex flex-column mb-5',\n                loadMore: 'btn btn-secondary d-block mt-4',\n                disabledLoadMore: 'btn btn-light mx-auto d-block mt-4',\n            },\n            templates: {\n                item: (data) => {\n                    return `\n                    <article>\n                        <h3><a href=\"${data.Link}\" target=\"_blank\">${data.Title}</a></h3>\n                        <p>${data._snippetResult.Content.value}</p>\n                    </article>\n                        `;\n                },\n                empty: 'No results found for <q>{{ query }}</q>. Try another search term.',\n                showMoreText: 'Show more results',\n            },\n        }),\n\n        instantsearch.widgets.stats({\n            container: '#global-stats',\n            templates: {\n                text: ({ nbHits, hasNoResults, hasOneResult, processingTimeMS }) => {\n                    let statsText = '';\n                    if (hasNoResults) {\n                        statsText = 'no results';\n                    } else if (hasOneResult) {\n                        statsText = '1 result';\n                    } else {\n                        statsText = `${nbHits.toLocaleString()} results`;\n                    }\n                    return '';\n                },\n            },\n            cssClasses: {\n                text: 'text-muted',\n            },\n        }),\n\n        instantsearch.widgets.refinementList({\n            container: '#global-refinementList-Tags',\n            attribute: 'Tags',\n            searchable: true,\n            searchablePlaceholder: 'Search tags',\n            showMore: true,\n            limit: 10,\n            showMoreLimit: 100,\n            operator: 'and',\n            cssClasses: {\n                searchableInput: 'form-control form-control-sm mb-2',\n                searchableSubmit: 'd-none',\n                searchableReset: 'd-none',\n                showMore: 'btn btn-secondary btn-sm',\n                list: 'list-unstyled',\n                label: 'd-flex align-items-center mb-1',\n                count: 'badge ml-2',\n                checkbox: 'mr-2',\n            },\n        })\n    ]);\n\n    search.start();\n\n\n    document.getElementById('global-search-input').addEventListener(\"keyup\", (event) => {\n        const searchContainer = document.getElementById('global-search-container'),\n            layoutContainer = document.getElementById('layout-container'),\n            inputContainer = searchContainer.querySelector(\"input\");\n\n        let inputLength = search.helper.state.query.length;\n\n        if(inputLength > 0) {\n            searchContainer.classList.remove('d-none');\n            layoutContainer.classList.add('d-none');\n        } else {\n            searchContainer.classList.add('d-none');\n            layoutContainer.classList.remove('d-none');\n        }\n    });\n\n});\n\n</script>\n```\n\nInstantSearch has many different configuration options that are beyond the scope of this documentation. A good open-source example application for how to achieve this can be found at https://findxkcd.com. [Source](https://github.com/typesense/showcase-xkcd-search)\n",
      "html": "<h2 id=\"searching\">Searching <a class=\"heading-anchor-permalink\" href=\"#searching\">#</a></h2>\n<p>To enable a basic traditional search (type a full query and execute once), create a controller and a route to it to respond to your search query (or use a page type with an action on it). For example:</p>\n<p>Note that when you’re searching in this way, you’re making use of the project’s global <code>Typesense::client()</code> and performs searches using the super-admin key.  While this is fine for backend use, you would not want to expose it to a front-end application.  You would want to use a search-only key for this: see “Instantsearch” section below.</p>\n<pre><code class=\"language-yml\">SilverStripe\\Control\\Director:\n  rules:\n    'search': 'YourName\\YourProject\\SearchController'\n</code></pre>\n<pre><code class=\"language-php\">class SearchController extends Controller\n{\n\n    public function index($request)\n    {\n        $client = Typesense::client();\n\n        $collectionName = 'Pages';\n\n        if($collectionName) {\n            $term = $request-&gt;getVar('term') ?? '*';\n            $searchParameters = [\n                'q' =&gt; $term,\n                'query_by' =&gt; 'Title, Content',\n            ];\n\n            $search = $client-&gt;collections[$collectionName]-&gt;documents-&gt;search($searchParameters);\n\n            var_dump($search);\n        }\n\n    }\n}\n</code></pre>\n<h3 id=\"creating-a-search-only-key\">Creating a search only key <a class=\"heading-anchor-permalink\" href=\"#creating-a-search-only-key\">#</a></h3>\n<p>In practice, you never want to expose your admin-only key in front-end forms.  For public front-end searches you’ll need to obtain a search-only key from the Typesense server.  While there are a number of ways to do this (including via the PHP SDK), the easiest is to use the Typesense dashboard:</p>\n<ul>\n<li><a href=\"http://localhost:18108/#/apikeys\">http://localhost:18108/#/apikeys</a></li>\n<li><a href=\"https://bfritscher.github.io/typesense-dashboard/#/apikeys\">https://bfritscher.github.io/typesense-dashboard/#/apikeys</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"../img/search-only-key.png\" alt=\"Create a search-only key\" title=\"Create a search-only key\"></th>\n<th><img src=\"../img/create-api-key.png\" alt=\"Create API Key\" title=\"Create API Key\"></th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<p>Select “Search Key Example” and change the description and “collections” array to <code>Pages</code> (or the name(s) of the collection(s) this key will be searching) and select “Create API Key” in the bottom right.  You’ll be shown the API key <em>one time</em> before it’s never shown again - record this value and save it in the TYPESENSE_SEARCH_KEY environment variable.</p>\n<p>You’ll need to expose this key in a method somewhere, such as Page::getTypesenseSearchKey():</p>\n<pre><code class=\"language-php\">    public function getTypesenseSearchKey() {\n        return Environment::getEnv('TYPESENSE_SEARCH_KEY');\n    }\n</code></pre>\n<h3 id=\"instantsearch\">Instantsearch <a class=\"heading-anchor-permalink\" href=\"#instantsearch\">#</a></h3>\n<p>You can set up Typesense to use Algolia’s Instantsearch library, using an adapter provided by Typesense.</p>\n<ul>\n<li><a href=\"https://github.com/typesense/typesense-instantsearch-adapter\">https://github.com/typesense/typesense-instantsearch-adapter</a></li>\n<li><a href=\"https://github.com/algolia/instantsearch/tree/v4.44.0\">https://github.com/algolia/instantsearch/tree/v4.44.0</a></li>\n</ul>\n<p>Please note this is a development-only example and may be outdated. In a production environment you would not want to load external Javascript in this way, and ensure you’re working with a recent supported version.</p>\n<p>Expose the search-only key in the HTML below:</p>\n<pre><code class=\"language-html\">&lt;script type=&quot;application/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/instantsearch.js@4.44.0&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;application/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/typesense-instantsearch-adapter@2/dist/typesense-instantsearch-adapter.min.js&quot;&gt;&lt;/script&gt;\n&lt;header&gt;\n&lt;div id=&quot;global-search-input&quot;&gt;&lt;/div&gt;\n&lt;/header&gt;\n\n&lt;div id=&quot;global-search-container&quot; class=&quot;container d-none&quot; data-typesense-search-key=&quot;$TypesenseSearchKey&quot;&gt;\n    &lt;div class=&quot;row&quot;&gt;\n        &lt;div class=&quot;col-12&quot;&gt;\n            &lt;h3&gt;Results&lt;/h3&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-3&quot;&gt;\n            &lt;div id=&quot;global-refinementList-Tags&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-9&quot;&gt;\n            &lt;div id=&quot;global-stats&quot;&gt;&lt;/div&gt;\n            &lt;div id=&quot;global-hits&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-js\">document.addEventListener(&quot;DOMContentLoaded&quot;, function(event) {\n    let typesenseApiKey = document\n        .getElementById('global-search-container')\n        .getAttribute('data-typesense-search-key');\n\n    const typesenseInstantsearchAdapter = new TypesenseInstantSearchAdapter({\n        server: {\n            apiKey: typesenseApiKey, // Be sure to use an API key that only allows searches, in production\n            nodes: [\n                {\n                    host: 'your-external-ip-or-dns-name',\n                    port: '8108',\n                    protocol: 'http',\n                },\n            ],\n        },\n        additionalSearchParameters: {\n            queryBy: 'Title,Content,Tags'\n        },\n    });\n    const searchClient = typesenseInstantsearchAdapter.searchClient;\n\n    const search = instantsearch({\n        searchClient,\n        indexName: 'Pages',\n    });\n\n    search.addWidgets([\n        instantsearch.widgets.searchBox({\n            container: '#global-search-input',\n            showSubmit: false,\n            showReset: false,\n            placeholder: 'type in a search term... ',\n            autofocus: true,\n            cssClasses: {\n                input: 'form-control me-2 w-100',\n                loadingIcon: 'stroke-primary',\n            },\n        }),\n        instantsearch.widgets.infiniteHits({\n            container: '#global-hits',\n            cssClasses: {\n                list: 'list-unstyled',\n                item: 'd-flex flex-column mb-5',\n                loadMore: 'btn btn-secondary d-block mt-4',\n                disabledLoadMore: 'btn btn-light mx-auto d-block mt-4',\n            },\n            templates: {\n                item: (data) =&gt; {\n                    return `\n                    &lt;article&gt;\n                        &lt;h3&gt;&lt;a href=&quot;${data.Link}&quot; target=&quot;_blank&quot;&gt;${data.Title}&lt;/a&gt;&lt;/h3&gt;\n                        &lt;p&gt;${data._snippetResult.Content.value}&lt;/p&gt;\n                    &lt;/article&gt;\n                        `;\n                },\n                empty: 'No results found for &lt;q&gt;{{ query }}&lt;/q&gt;. Try another search term.',\n                showMoreText: 'Show more results',\n            },\n        }),\n\n        instantsearch.widgets.stats({\n            container: '#global-stats',\n            templates: {\n                text: ({ nbHits, hasNoResults, hasOneResult, processingTimeMS }) =&gt; {\n                    let statsText = '';\n                    if (hasNoResults) {\n                        statsText = 'no results';\n                    } else if (hasOneResult) {\n                        statsText = '1 result';\n                    } else {\n                        statsText = `${nbHits.toLocaleString()} results`;\n                    }\n                    return '';\n                },\n            },\n            cssClasses: {\n                text: 'text-muted',\n            },\n        }),\n\n        instantsearch.widgets.refinementList({\n            container: '#global-refinementList-Tags',\n            attribute: 'Tags',\n            searchable: true,\n            searchablePlaceholder: 'Search tags',\n            showMore: true,\n            limit: 10,\n            showMoreLimit: 100,\n            operator: 'and',\n            cssClasses: {\n                searchableInput: 'form-control form-control-sm mb-2',\n                searchableSubmit: 'd-none',\n                searchableReset: 'd-none',\n                showMore: 'btn btn-secondary btn-sm',\n                list: 'list-unstyled',\n                label: 'd-flex align-items-center mb-1',\n                count: 'badge ml-2',\n                checkbox: 'mr-2',\n            },\n        })\n    ]);\n\n    search.start();\n\n\n    document.getElementById('global-search-input').addEventListener(&quot;keyup&quot;, (event) =&gt; {\n        const searchContainer = document.getElementById('global-search-container'),\n            layoutContainer = document.getElementById('layout-container'),\n            inputContainer = searchContainer.querySelector(&quot;input&quot;);\n\n        let inputLength = search.helper.state.query.length;\n\n        if(inputLength &gt; 0) {\n            searchContainer.classList.remove('d-none');\n            layoutContainer.classList.add('d-none');\n        } else {\n            searchContainer.classList.add('d-none');\n            layoutContainer.classList.remove('d-none');\n        }\n    });\n\n});\n\n&lt;/script&gt;\n</code></pre>\n<p>InstantSearch has many different configuration options that are beyond the scope of this documentation. A good open-source example application for how to achieve this can be found at <a href=\"https://findxkcd.com\">https://findxkcd.com</a>. <a href=\"https://github.com/typesense/showcase-xkcd-search\">Source</a></p>\n",
      "id": 6
    },
    {
      "path": "08-troubleshooting.md",
      "url": "08-troubleshooting.html",
      "content": "# Troubleshooting\n\n## When I run the index task, some records are being skipped.\n\nTypesense will validate uploaded data before inserting it into the collection, according to the schema that you've provided to it. This means if it receives data where even one field doesn't match what is expected in the schema, the entire record gets skipped.\n\nOne common example is from the docs, where you're maybe indexing the pages on your site but some do not have Content to display.  If the field is not marked as `optional: true`, Typesense will not accept the record if it the field is empty.\n",
      "html": "<h1 id=\"troubleshooting\">Troubleshooting <a class=\"heading-anchor-permalink\" href=\"#troubleshooting\">#</a></h1>\n<h2 id=\"when-i-run-the-index-task%2C-some-records-are-being-skipped.\">When I run the index task, some records are being skipped. <a class=\"heading-anchor-permalink\" href=\"#when-i-run-the-index-task%2C-some-records-are-being-skipped.\">#</a></h2>\n<p>Typesense will validate uploaded data before inserting it into the collection, according to the schema that you’ve provided to it. This means if it receives data where even one field doesn’t match what is expected in the schema, the entire record gets skipped.</p>\n<p>One common example is from the docs, where you’re maybe indexing the pages on your site but some do not have Content to display.  If the field is not marked as <code>optional: true</code>, Typesense will not accept the record if it the field is empty.</p>\n",
      "id": 7
    },
    {
      "path": "09-copyright.md",
      "url": "09-copyright.html",
      "content": "## Copyright statements\n\nThis software includes contributions from Elliot Sawyer, available under the [LGPL3-With-Attribution license](https://codeberg.org/0x/silverstripe-typesense/src/branch/pages/LICENSE.md). This attribution statement is required to be shipped with the module, and is displayed within your application. These will appear in certain areas of your application where the module is being used.\n",
      "html": "<h2 id=\"copyright-statements\">Copyright statements <a class=\"heading-anchor-permalink\" href=\"#copyright-statements\">#</a></h2>\n<p>This software includes contributions from Elliot Sawyer, available under the <a href=\"https://codeberg.org/0x/silverstripe-typesense/src/branch/pages/LICENSE.md\">LGPL3-With-Attribution license</a>. This attribution statement is required to be shipped with the module, and is displayed within your application. These will appear in certain areas of your application where the module is being used.</p>\n",
      "id": 8
    },
    {
      "path": "10-support.md",
      "url": "10-support.html",
      "content": "## Support\n\nLike my work? Consider shouting me a coffee or a small donation if this module helped you solve a problem. I accept cryptocurrency at the following addresses:\n\n* Bitcoin: 12gSxkqVNr9QMLQMMJdWemBaRRNPghmS3p\n* Bitcoin Cash: 1QETPtssFRM981TGjVg74uUX8kShcA44ni\n* Litecoin: LbyhaTESx3uQvwwd9So4sGSpi4tTJLKBdz\n\nPaid support is available. Please get in touch at https://sawyer.nz/contact\n",
      "html": "<h2 id=\"support\">Support <a class=\"heading-anchor-permalink\" href=\"#support\">#</a></h2>\n<p>Like my work? Consider shouting me a coffee or a small donation if this module helped you solve a problem. I accept cryptocurrency at the following addresses:</p>\n<ul>\n<li>Bitcoin: 12gSxkqVNr9QMLQMMJdWemBaRRNPghmS3p</li>\n<li>Bitcoin Cash: 1QETPtssFRM981TGjVg74uUX8kShcA44ni</li>\n<li>Litecoin: LbyhaTESx3uQvwwd9So4sGSpi4tTJLKBdz</li>\n</ul>\n<p>Paid support is available. Please get in touch at <a href=\"https://sawyer.nz/contact\">https://sawyer.nz/contact</a></p>\n",
      "id": 9
    }
  ]
}